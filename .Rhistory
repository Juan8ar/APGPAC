# seleccionar la tercera película
nombre[3]
# seleccionar la primera y la última película
nombre[c(1,4)]
## selección basada en condición lógica
# crear condición lógica
puntuación baja<- Puntuación < 7
## selección basada en condición lógica
# crear condición lógica
puntuación_baja<- Puntuación < 7
## selección basada en condición lógica
# crear condición lógica
puntuación_baja<- Puntuación < 7
## selección basada en condición lógica
# crear condición lógica
Puntuación_baja <- Puntuación < 7
# mostrar condición para ver TRUE/FALSE
Puntuación_baja
# mostrar puntuaciones bajas
Puntuación[Puntuación_baja]
# mostrar nombres de películas con puntuaciones bajas
nombre[puntuación_baja]
# crear vectores para las columnas de la matriz
warner <- c(20,20,16,17,17,22,17,18,19)
disney <- c(11,13,11,8,12,11,12,8,10)
fox <- c(18,15,15,15,16,17,15,13,11)
# creando matriz a partir de vectores
peliculas <- matrix(c(warner, disney, fox),
nrow = 9,
ncol = 3)
# imprimir matriz en consola
peliculas
# agregar nombres de columnas
colnames(peliculas) <- c(warner, disney, fox)
# agregar nombres de filas/renglones
rownames(peliculas) <- c ('2010', '2011', '2012', '2013','2014','2015','2016','2017')
# agregar nombres de columnas
colnames(peliculas) <- c(warner, disney, fox)
# agregar nombres de columnas
colnames(peliculas) <- c(warner,disney,fox)
# agregar nombres de columnas
colnames(peliculas)<-c(warner,disney,fox)
# agregar nombres de columnas
colnames(peliculas)<-c('warner','disney','fox')
# agregar nombres de filas/renglones
rownames(peliculas) <- c ('2010', '2011', '2012', '2013','2014','2015','2016','2017')
# agregar nombres de filas/renglones
rownames(peliculas) <- c ('2010', '2011', '2012', '2013','2014','2015','2016','2017','2018')
# imprimir matriz por segunda vez
peliculas
# resta 5 a la matriz
peliculas - 5
# sumar matriz consigo misma
peliculas+peliculas
# multiplicar la matriz consigo mismo
peliculas*peliculas
# seleccionar un elemento de la matriz
peliculas[3,2]
# seleccionar más de un elemento de la matriz
peliculas['2012', 'disney']
# seleccionar una fila o renglón
peliculas[c(3,4), c(2,3)]
# seleccionar un elemento de la matriz
peliculas[3,2]
peliculas['2012', 'disney']
# seleccionar más de un elemento de la matriz
peliculas[c(3,4), c(2,3)]
peliculas[c(3,4), c('disney')]
# seleccionar una fila o renglón
peliculas[3,]
peliculas['2012']
# seleccionar una fila o renglón
peliculas[3,]
peliculas['2012']
# seleccionar una columna
peliculas[,2]
# crear vector de ventas
tallas <- c('m', 'g', 'S', 'S','m', 'M')
# intentar graficar
plot(tallas)
# graficar factor
plot(tallas_factor)
# crear factor de un vector
tallas_factor <- factor(tallas)
# graficar factor
plot(tallas_factor)
# mirar niveles de factor
levels(tallas_factor)
# creando factor recodificado
tallas_recodificado <- factor(tallas,
levels = c("g","m","M","S"),
labels = c("G","M","M","S"))
# graficando ventas_recodificado
plot(tallas_recodificado)
# ordenando niveles (copiar factor anterior)
tallas_recodificado <- factor(tallas,
ordered = TRUE
levels = c("g","m","M","S"),
# ordenando niveles (copiar factor anterior)
tallas_ordenado <- factor(tallas,
ordered = TRUE
levels = c("g","m","M","S"),
# ordenando niveles (copiar factor anterior)
tallas_ordenado <- factor(tallas,
ordered = TRUE,
levels = c("g","m","M","S"),
labels = c("G","M","M","S"))
# viendo el orden en los niveles
tallas_ordenado
# graficando el factor ordenado
plot(tallas_ordenado)
# ordenando niveles (copiar factor anterior)
tallas_ordenado <- factor(tallas,
ordered = TRUE,
levels = c("g","m","M","S"),
labels = c("G","M","M","S"))
# graficando el factor ordenado
plot(tallas_ordenado)
# viendo el orden en los niveles
tallas_ordenado
# ordenando niveles (copiar factor anterior)
tallas_ordenado <- factor(tallas,
ordered = TRUE,
levels = c("S","m","M","g"),
labels = c("S","M","M","G"))
# viendo el orden en los niveles
tallas_ordenado
# graficando el factor ordenado
plot(tallas_ordenado)
library(FinancialMath)
library(reticulate)
detach("package:reticulate", unload = TRUE)
library(reticulate)
detach("package:reticulate", unload = TRUE)
library(reticulate)
library(reticulate)
library(reticulate)
library(reticulate)
virtualenv_create("r-reticulate-new")
use_virtualenv("r-reticulate-new", required = TRUE)
library(reticulate)
virtualenv_create("r-reticulate-new")
use_virtualenv("r-reticulate-new", required = TRUE)
conda env remove --name r-reticulate-new
library(reticulate)
virtualenv_create("r-reticulate-new")
use_virtualenv("r-reticulate-new", required = TRUE)
library(reticulate)
use_virtualenv("r-reticulate-new", required = TRUE)
py_config()
py_install("pandas")
py_run_string("import pandas as pd")
remotes::install_github("rstudio/reticulate")
reticulate::install_miniconda()
install.packages("reticulate")
install.packages("reticulate")
library(reticulate)
use_python("C:/ruta/a/tu/python.exe", required = TRUE)
#use_python("C:/Users/USER/anaconda3/python311.dll", required = TRUE)
```
install.packages("FinancialMath")
install.packages("reticulate")
install.packages("png")
install.packages("png")
install.packages("png")
library(readxl)
PAA_2024 <- read_excel("Data/PAA-2024.xlsx")
View(PAA_2024)
library(ggplot2)
data <- readxl::read_excel("Data/PAA-2024.xlsx")
data <- data[c(2,10)]
library(ggplot2)
ggplot(data, aes(y = `Valor estimado en la vigencia actual`)) +
geom_histogram(binwidth = 1000, fill = "blue", color = "black", alpha = 0.7) +
theme_minimal() +
labs(title = "Histogram of PAA_2024 Column 10",
x = "Value",
y = "Frequency")
ggplot(data, aes(y = `Valor estimado en la vigencia actual`)) +
geom_histogram(binwidth = 1000000, fill = "blue", color = "black", alpha = 0.7) +
theme_minimal() +
labs(title = "Histogram of PAA_2024 Column 10",
x = "Value",
y = "Frequency")
ggplot(data,aes(x=data$Descripción,
y = data$`Valor estimado en la vigencia actual`)) +
geom_bar(binwidth=1)
ggplot(data,aes(x=Descripción,
y = `Valor estimado en la vigencia actual`)) +
geom_bar(binwidth=1)
library(ggplot2)
ggplot(data,aes(x=Descripción,
y = `Valor estimado en la vigencia actual`)) +
geom_bar(binwidth=1000000)
rlang::last_trace()
ggplot(data,aes(x=reorder(Descripción, `Valor estimado en la vigencia actual`),
y = `Valor estimado en la vigencia actual`)) +
geom_bar(binwidth=1000000)
ggplot(data,aes(x=reorder(Descripción, `Valor estimado en la vigencia actual`),
y = `Valor estimado en la vigencia actual`)) +
geom_bar()
library(dplyr)
library(forcats)
data %>% mutate(name = fct_reorder(Descripción, `Valor estimado en la vigencia actual`)) %>%
ggplot( aes(x=Descripción, y=`Valor estimado en la vigencia actual`)) +
geom_bar(stat="identity", fill="#f68060", alpha=.6, width=.4) +
coord_flip() +
xlab("") +
theme_bw()
rlang::last_trace()
data <- na.omit(data[c(2,10)])
data <- readxl::read_excel("Data/PAA-2024.xlsx")
data <- readxl::read_excel("Data/PAA-2024.xlsx")
data <- na.omit(data[c(2,10)])
library(dplyr)
library(forcats)
data %>% mutate(name = fct_reorder(Descripción, `Valor estimado en la vigencia actual`)) %>%
ggplot( aes(x=Descripción, y=`Valor estimado en la vigencia actual`)) +
geom_bar(stat="identity", fill="#f68060", alpha=.6, width=.4) +
coord_flip() +
xlab("") +
theme_bw()
View(PAA_2024)
data <- readxl::read_excel("Data/PAA-2024.xlsx")
data <- na.omit(data[c(2,4)])
library(dplyr)
library(forcats)
data %>% mutate(name = fct_reorder(Descripción, `Fecha estimada de presentación de ofertas (mes)`)) %>%
ggplot( aes(x=Descripción, y=`Fecha estimada de presentación de ofertas (mes)`)) +
geom_bar(stat="identity", fill="#f68060", alpha=.6, width=.4) +
coord_flip() +
xlab("") +
theme_bw()
data <- readxl::read_excel("Data/PAA-2024.xlsx")
data <- na.omit(data[c(4,10)])
library(dplyr)
library(forcats)
data %>% mutate(name = fct_reorder(`Valor estimado en la vigencia actual`, `Fecha estimada de presentación de ofertas (mes)`)) %>%
ggplot( aes(x=`Valor estimado en la vigencia actual`, y=`Fecha estimada de presentación de ofertas (mes)`)) +
geom_bar(stat="identity", fill="#f68060", alpha=.6, width=.4) +
coord_flip() +
xlab("") +
theme_bw()
data <- readxl::read_excel("Data/PAA-2024.xlsx")
data <- na.omit(data[c(4,10)])
library(dplyr)
library(forcats)
data %>% mutate(name = fct_reorder(`Valor estimado en la vigencia actual`, `Fecha estimada de presentación de ofertas (mes)`)) %>%
ggplot( aes(x=`Valor estimado en la vigencia actual`, y=`Fecha estimada de presentación de ofertas (mes)`)) +
geom_bar(stat="identity", fill="#f68060", alpha=.6, width=.4) +
coord_flip() +
xlab("") +
theme_bw()
View(data)
library(readxl)
PAA_2024 <- read_excel("Data/PAA-2024.xlsx")
View(PAA_2024)
data <- readxl::read_excel("Data/PAA-2024.xlsx")
data <- na.omit(data[c(4,10)])
colnames(data)[1] <- "Mes"
colnames(data)[2] <- "Valor"
library(dplyr)
resumen <- data %>%
group_by(Mes) %>%
summarize(Presupuesto = sum(Valor, na.rm = TRUE))
rowSums(resumen$Presupuesto)
View(resumen)
sum(resumen$Presupuesto)
library(reticulate)
data <- readxl::read_excel("Data/PAA-2024.xlsx")
data <- na.omit(data[c(4,10)])
colnames(data)[1] <- "Mes"
colnames(data)[2] <- "Valor"
library(dplyr)
resumen <- data %>%
group_by(Mes) %>%
summarize(Presupuesto = sum(Valor, na.rm = TRUE))
View(resumen)
View(data)
library(readxl)
PAA_2024 <- read_excel("Data/PAA-2024.xlsx")
View(PAA_2024)
library(dplyr)
correos <- filter(PAA_2024, grepl('Bogotá|Barrancabermeja', Ubicaión))
library(dplyr)
correos <- filter(PAA_2024, grepl('Bogotá|Barrancabermeja', Ubicación))
View(correos)
unique(correos$`Nombre del responsable`)
correosBogota <- filter(PAA_2024, grepl('Bogotá', Ubicación))
correosBarrancabermeja <- filter(PAA_2024, grepl('Barrancabermeja', Ubicación))
unique(correosBogota$`Nombre del responsable`)
unique(correosBarrancabermeja$`Nombre del responsable`)
load("~/Documents/GitHub/APGPAC/Data/DataForFigure4.RData")
library(readxl)
PAA_2024 <- read_excel("Data/PAA-2024.xlsx")
View(PAA_2024)
unique(PAA_2024$`Nombre del responsable`)
unique(PAA_2024$Ubicación)
variable.names(PAA_2024)
Responsable_Ubicacion <- PAA_2024[c(14,15)]
View(Responsable_Ubicacion)
library(igraph)
int <- as.matrix(Responsable_Ubicacion)
net1 <- graph_from_edgelist(int, directed = FALSE)
summary(net1)
int <- as.matrix(Responsable_Ubicacion)
net1 <- graph_from_edgelist(int, directed = FALSE)
library(igraph)
int <- as.matrix(Responsable_Ubicacion)
net1 <- graph_from_edgelist(int, directed = FALSE)
Responsable_Ubicacion <- na.omit(PAA_2024[c(14,15)])
library(igraph)
int <- as.matrix(Responsable_Ubicacion)
net1 <- graph_from_edgelist(int, directed = FALSE)
summary(net1)
plot(net1,
displaylabels = TRUE,
edge.width=0.5,
vertex.label.cex=0.6,
vertex.shape = "circle",
vertex.color = "white",
vertex.frame.color = "gray",
vertex.label.font=1,
layout =   layout_as_star)
View(int)
net1
NET <- as.matrix(net1)
View(NET)
NET
NET
print(NET)
NET <- matrix(NET)
View(NET)
NET <- as.matrix(net1)
colnames(NET)
rownames(NET)
library(readxl)
PAA_2024 <- read_excel("Data/PAA-2024.xlsx")
unique(PAA_2024$`Nombre del responsable`)
unique(PAA_2024$Ubicación)
variable.names(PAA_2024)
Responsable_Ubicacion <- na.omit(PAA_2024[c(14,15)])
library(igraph)
bn2 <- graph.data.frame(Responsable_Ubicacion,directed=FALSE)
bipartite.mapping(bn2)
V(bn2)$type <- bipartite_mapping(bn2)$type
V(bn2)$color <- ifelse(V(bn2)$type, "red", "green")
V(bn2)$shape <- ifelse(V(bn2)$type, "circle", "square")
V(bn2)$label.cex <- ifelse(V(bn2)$type, 0.5, 1)
V(bn2)$size <- sqrt(igraph::degree(bn2))
E(bn2)$color <- "lightgrey"
bn2.pr <- bipartite.projection(bn2)
Terms <- bn2.pr$proj2
centrality_scores <- igraph::eigen_centrality(Terms)
centrality_scores <- centrality_scores$vector
# Create a color palette with different colors
color_palette <- colorRampPalette(c("orange", "white", "darkgreen"))(length(unique(centrality_scores)))
# Assign colors to nodes based on their normalized centrality scores
node_colors <- color_palette[rank(centrality_scores)]
# Plot the network with node colors based on centrality
set.seed(56)
plot(Terms, vertex.label.color = "black", vertex.label.cex = 0.8, vertex.color = node_colors, vertex.size = 15, edge.width = 0.5, edge.color = "lightgray", layout = layout_with_drl, main = "")
Responsable_Ubicacion <- tolower(Responsable_Ubicacion)
unique(PAA_2024$`Nombre del responsable`)
library(readxl)
PAA_2024 <- read_excel("Data/PAA-2024.xlsx")
unique(PAA_2024$`Nombre del responsable`)
unique(PAA_2024$Ubicación)
variable.names(PAA_2024)
Responsable_Ubicacion <- na.omit(PAA_2024[c(14,15)])
unique(PAA_2024$`Nombre del responsable`)
PAA_2024$`Nombre del responsable` <- tolower(PAA_2024$`Nombre del responsable`)
unique(PAA_2024$`Nombre del responsable`)
unique(PAA_2024$Ubicación)
library(readxl)
PAA_2024 <- read_excel("Data/PAA-2024.xlsx")
unique(PAA_2024$`Nombre del responsable`)
unique(PAA_2024$Ubicación)
unique(PAA_2024$`Nombre del responsable`)
library(readxl)
PAA_2024 <- read_excel("Data/PAA-2024.xlsx")
unique(PAA_2024$`Nombre del responsable`)
PAA_2024$`Nombre del responsable` <- tolower(PAA_2024$`Nombre del responsable`)
unique(PAA_2024$`Nombre del responsable`)
unique(PAA_2024$Ubicación)
variable.names(PAA_2024)
variable.names(PAA_2024)
Responsable_Ubicacion <- na.omit(PAA_2024[c(14,15)])
unique(PAA_2024$`Nombre del responsable`)
unique(PAA_2024$`Nombre del responsable`)
unique(Responsable_Ubicacion$`Nombre del responsable`)
unique(Responsable_Ubicacion$Ubicación)
bn2 <- graph.data.frame(Responsable_Ubicacion,directed=FALSE)
bipartite.mapping(bn2)
V(bn2)$type <- bipartite_mapping(bn2)$type
V(bn2)$color <- ifelse(V(bn2)$type, "red", "green")
V(bn2)$shape <- ifelse(V(bn2)$type, "circle", "square")
V(bn2)$label.cex <- ifelse(V(bn2)$type, 0.5, 1)
V(bn2)$size <- sqrt(igraph::degree(bn2))
E(bn2)$color <- "lightgrey"
plot(bn2)
plot(bn2, layout = layout_as_bipartite)
plot(bn2, layout = layout_in_circle)
View(Responsable_Ubicacion)
Responsable_Ubicacion$Ubicación <- sub(".*- ", "", Responsable_Ubicacion$Ubicación)
unique(Responsable_Ubicacion$`Nombre del responsable`)
unique(Responsable_Ubicacion$Ubicación)
library(igraph)
bn2 <- graph.data.frame(Responsable_Ubicacion,directed=FALSE)
bipartite.mapping(bn2)
V(bn2)$type <- bipartite_mapping(bn2)$type
V(bn2)$color <- ifelse(V(bn2)$type, "red", "green")
V(bn2)$shape <- ifelse(V(bn2)$type, "circle", "square")
V(bn2)$size <- sqrt(igraph::degree(bn2))
E(bn2)$color <- "lightgrey"
plot(bn2, layout = layout_in_circle)
plot(bn2, layout = layout_as_tree)
plot(bn2, layout = layout_components)
plot(bn2, layout = layout_in_circle)
V(bn2)$size <- sqrt(igraph::closeness(bn2))
E(bn2)$color <- "lightgrey"
plot(bn2, layout = layout_in_circle)
plt.x <- c(rep(2,6),rep(4,4))
plt.y <- c(7:2,6:3)
lay <- as.matrix(cbind(plt.x,plt.y))
View(lay)
unique(Responsable_Ubicacion$`Nombre del responsable`)
library(readxl)
PAA_2024 <- read_excel("Data/PAA-2024.xlsx")
unique(PAA_2024$`Nombre del responsable`)
PAA_2024$`Nombre del responsable` <- tolower(PAA_2024$`Nombre del responsable`)
unique(PAA_2024$`Nombre del responsable`)
unique(PAA_2024$Ubicación)
variable.names(PAA_2024)
Responsable_Ubicacion <- na.omit(PAA_2024[c(14,15)])
Responsable_Ubicacion$Ubicación <- sub(".*- ", "", Responsable_Ubicacion$Ubicación)
unique(Responsable_Ubicacion$`Nombre del responsable`)
unique(Responsable_Ubicacion$Ubicación)
library(igraph)
bn2 <- graph.data.frame(Responsable_Ubicacion,directed=FALSE)
bipartite.mapping(bn2)
V(bn2)$type <- bipartite_mapping(bn2)$type
V(bn2)$color <- ifelse(V(bn2)$type, "red", "green")
V(bn2)$shape <- ifelse(V(bn2)$type, "circle", "square")
V(bn2)$size <- sqrt(igraph::closeness(bn2))
E(bn2)$color <- "lightgrey"
plot(bn2, layout = layout_in_circle)
V(bn2)$size <- sqrt(igraph::betweenness(bn2))
E(bn2)$color <- "lightgrey"
plot(bn2, layout = layout_in_circle)
bn2.pr <- bipartite.projection(bn2)
bn2.pr$proj2
Responsables <- bn2.pr$proj2
Importantes <- degree(Responsables)
Importantes
bn2.pr$proj1
Ciudades <- bn2.pr$proj1
Importantes1 <- degree(Responsables)
Importantes2 <- degree(Ciudades)
Importantes2
library(readxl)
PAA_2024 <- read_excel("Data/PAA-2024.xlsx")
View(PAA_2024)
unique(PAA_2024$`Nombre del responsable`)
PAA_2024$`Nombre del responsable` <- tolower(PAA_2024$`Nombre del responsable`)
unique(PAA_2024$`Nombre del responsable`)
unique(PAA_2024$Ubicación)
variable.names(PAA_2024)
Responsable_Ubicacion <- na.omit(PAA_2024[c(14,15)])
View(Responsable_Ubicacion)
Responsable_Ubicacion$Ubicación <- sub(".*- ", "", Responsable_Ubicacion$Ubicación)
View(Responsable_Ubicacion)
unique(Responsable_Ubicacion$`Nombre del responsable`)
unique(Responsable_Ubicacion$Ubicación)
library(igraph)
bn2 <- graph.data.frame(Responsable_Ubicacion,directed=FALSE)
bipartite.mapping(bn2)
V(bn2)$type <- bipartite_mapping(bn2)$type
V(bn2)$color <- ifelse(V(bn2)$type, "red", "green")
V(bn2)$shape <- ifelse(V(bn2)$type, "circle", "square")
V(bn2)$size <- sqrt(igraph::betweenness(bn2))
E(bn2)$color <- "lightgrey"
plot(bn2, layout = layout_in_circle)
bn2.pr <- bipartite.projection(bn2)
Responsables <- bn2.pr$proj2
Ciudades <- bn2.pr$proj1
Importantes1 <- degree(Responsables)
Importantes2 <- degree(Ciudades)
Importantes1
View(PAA_2024)
unique(Responsable_Ubicacion$`Nombre del responsable`)
library(readxl)
PAA_2024 <- read_excel("Data/PAA-2024.xlsx")
unique(PAA_2024$`Nombre del responsable`)
PAA_2024$`Nombre del responsable` <- tolower(PAA_2024$`Nombre del responsable`)
unique(PAA_2024$`Nombre del responsable`)
unique(PAA_2024$Ubicación)
variable.names(PAA_2024)
Responsable_Ubicacion <- na.omit(PAA_2024[c(14,15)])
Responsable_Ubicacion$Ubicación <- sub(".*- ", "", Responsable_Ubicacion$Ubicación)
Responsable_Ubicacion$`Nombre del responsable` <- gsub("i", "í", Responsable_Ubicacion$`Nombre del responsable`)
unique(Responsable_Ubicacion$`Nombre del responsable`)
unique(Responsable_Ubicacion$Ubicación)
library(igraph)
bn2 <- graph.data.frame(Responsable_Ubicacion,directed=FALSE)
bipartite.mapping(bn2)
V(bn2)$type <- bipartite_mapping(bn2)$type
V(bn2)$color <- ifelse(V(bn2)$type, "red", "green")
V(bn2)$shape <- ifelse(V(bn2)$type, "circle", "square")
V(bn2)$size <- sqrt(igraph::betweenness(bn2))
E(bn2)$color <- "lightgrey"
plot(bn2, layout = layout_in_circle)
