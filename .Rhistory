library(config)
get("default",file="03-Primer_Caso.yml")
authors <- config::get("default", file = "03-Primer_Caso.yml")
yaml::yaml.load_file("03-Primer_Caso.yml")$default
authors <- yaml::yaml.load_file("03-Primer_Caso.yml")$default
affiliations <- yaml::yaml.load_file("03-Primer_Caso.yml")$affiliation
cat(paste("Authors:", paste(authors, collapse = ", ")), sep = "\n") cat(paste("Affiliations:", paste(affiliations, collapse = ", ")), sep = "\n")
authors <- yaml::yaml.load_file("03-Primer_Caso.yml")$default
affiliations <- yaml::yaml.load_file("03-Primer_Caso.yml")$affiliation
cat(paste("Authors:", paste(authors, collapse = ", ")), sep = "\n") cat(paste("Affiliations:", paste(affiliations, collapse = ", ")), sep = "\n")
authors
authors <- yaml::yaml.load_file("03-Primer_Caso.yml")$default
affiliations <- yaml::yaml.load_file("03-Primer_Caso.yml")$affiliation
cat(paste("Authors:", paste(authors, collapse = ", ")), sep = "\n") cat(paste("Affiliations:", paste(affiliations, collapse = ", ")), sep = "\n")
affiliations
cat(paste("Authors:", paste(authors, collapse = ", ")), sep = "\n")
cat(paste("Affiliations:", paste(affiliations, collapse = ", ")), sep = "\n")
authors[1]
unlist(authors)
unlist(authors)
authors <- unlist(noquote(yaml::yaml.load_file("03-Primer_Caso.yml")$default))
affil <- unlist(noquote(yaml::yaml.load_file("03-Primer_Caso.yml")$affiliation))
cat("Authors:", paste(authors, collapse = ", "), "\n") cat("Affiliations:", paste(affiliations, collapse = ", "), "\n")
cat("Authors:", paste(authors, collapse = ", "), "\n")
library(readr)
Data_Figure2 <- read_csv("Data/Data_Figure2.csv")
View(Data_Figure2)
library(readr)
Data_Figure2 <- read_csv("Data/Data_Figure2.csv")
library(igraph)
Network <- Data_Figure2
bn2 <- graph.data.frame(Network,directed=FALSE)
V(bn2)$type <- bipartite_mapping(bn2)$type
V(bn2)$color <- ifelse(V(bn2)$type, "green", "red")
V(bn2)$shape <- ifelse(V(bn2)$type, "square", "circle")
V(bn2)$label.cex <- ifelse(V(bn2)$type, 0.5, 1)
V(bn2)$size <- sqrt(igraph::degree(bn2))
E(bn2)$color <- "lightgrey"
bn2.pr <- bipartite.projection(bn2)
Programs <- bn2.pr$proj2
Skills <- bn2.pr$proj1
plot(Skills, vertex.label.color = "black",
vertex.label.cex = 1.5,
vertex.color = "lightgreen",
vertex.size = 60,
edge.width = 3.5,
edge.color = "gray30",
layout = layout_components, main = "")
plot(Programs, vertex.label.color = "black",
vertex.label.cex = 1.2,
vertex.color = "pink",
vertex.size = 40,
edge.width = 5,
edge.color = "gray30",
layout = layout_components,
main = "")
install.packages(c("bslib", "countrycode", "dbplyr", "gamlss", "ggsci", "insight", "parameters", "performance", "pkgbuild", "psych", "remotes", "rstudioapi", "servr", "shinyWidgets", "statsExpressions"))
install.packages(c("bslib", "countrycode", "dbplyr", "gamlss", "ggsci", "insight", "parameters", "performance", "pkgbuild", "psych", "remotes", "rstudioapi", "servr", "shinyWidgets", "statsExpressions"))
install.packages("PlotPrjNetworks")
library(PlotPrjNetworks)
project1=data.frame(
task=c("Market Research","Concept Development","Viability Test",
"Preliminary Design","Process Design","Prototyping","Market Testing","Final Design",
"Launching"),
start=c("2015-07-05","2015-07-05","2015-08-05","2015-10-05","2015-10-05","2016-02-18",
"2016-03-18","2016-05-18","2016-07-18"),
end=c("2015-08-05","2015-08-05","2015-10-05","2016-01-05","2016-02-18","2016-03-18",
"2016-05-18","2016-07-18","2016-09-18"))
project2=data.frame(
from=c(1,2,3,4,5,6,7,8),
to=c(2,3,4,5,6,7,8,9),
type=c("SS","FS","FS","SS","FS","FS","FS","FS"),
delay=c(7,7,7,8,10,10,10,10))
GanttChart(project1,project2)
View(project1)
View(project1)
View(project2)
info=data.frame(
task=c("Estimate market and make more exact marketing message",
"Design and order final package","Create press releases",
"Create product specification materials","Create marketing presentations",
"Transmit product launch details to international organization",
"Create sales, local, and product support groups training",
"Update product forecasts based on market feedback and analysis",
"Update launch plan based on forecast"),
start=c("2015-08-20","2015-08-23","2015-08-23","2015-08-23","2015-08-23","2015-09-04",
"2015-09-05","2015-08-23","2015-08-24"),
end=c("2015-08-22","2015-08-29","2015-08-29","2015-09-03","2015-08-29","2015-09-05",
"2015-09-17","2015-08-24","2015-08-28"))
details=data.frame(
from=c(1,1,1,1,1,1,2,3,4,5,6,8,9),
to=c(2,3,4,5,6,8,6,6,6,6,7,9,7),
type=c("FS","FS","FS","FS","FS","FS","FS","FS","FS","FS","FS","FS","FS"),
delay=c(0,0,0,0,0,0,0,0,0,0,0,0,0))
GanttChart(info,details)
install.packages("plan")
GanttChart(project1,project2)
library(PlotPrjNetworks)
project1=data.frame(
tarea=c("Investigación de Mercado","Desarrollo de Concepto","Test de Viabilidad",
"Diseño Preliminar","Diseño de Proceso","Prototipado","Prueba de Mercado","Diseño Final", "Lanzamiento"),
start=c("2015-07-05","2015-07-05","2015-08-05","2015-10-05","2015-10-05","2016-02-18",
"2016-03-18","2016-05-18","2016-07-18"),
end=c("2015-08-05","2015-08-05","2015-10-05","2016-01-05","2016-02-18","2016-03-18",
"2016-05-18","2016-07-18","2016-09-18"))
project2=data.frame(
from=c(1,2,3,4,5,6,7,8),
to=c(2,3,4,5,6,7,8,9),
type=c("SS","FS","FS","SS","FS","FS","FS","FS"),
delay=c(7,7,7,8,10,10,10,10))
GanttChart(project1,project2)
View(project1)
project1=data.frame(
task=c("Investigación de Mercado","Desarrollo de Concepto","Test de Viabilidad",
"Diseño Preliminar","Diseño de Proceso","Prototipado","Prueba de Mercado","Diseño Final", "Lanzamiento"),
start=c("2015-07-05","2015-07-05","2015-08-05","2015-10-05","2015-10-05","2016-02-18",
"2016-03-18","2016-05-18","2016-07-18"),
end=c("2015-08-05","2015-08-05","2015-10-05","2016-01-05","2016-02-18","2016-03-18",
"2016-05-18","2016-07-18","2016-09-18"))
project2=data.frame(
from=c(1,2,3,4,5,6,7,8),
to=c(2,3,4,5,6,7,8,9),
type=c("SS","FS","FS","SS","FS","FS","FS","FS"),
delay=c(7,7,7,8,10,10,10,10))
GanttChart(project1,project2)
View(project1)
install.packages("bookdown")
install.packages(c("matrixStats", "mlr3misc", "pkgdown", "prismatic", "renv", "testthat", "tidytext"))
library(FinancialMath)
amort.table(Loan=1000,n=2,i=.005,ic=1,pf=1)
bond(f=100,r=.04,c=100,n=20,i=.04,ic=1,cf=1,t=1)
TVM(pv=10,fv=20,i=.05,ic=2,plot=TRUE)
cf.analysis(cf=c(1,1,101),times=c(1,2,3),i=.04,time.d=TRUE)
install.packages("metafor")
cf.analysis(cf=c(1,1,101),times=c(1,2,3),i=.04,time.d=TRUE)
NPV(cf0=100,cf=c(50,40),times=c(3,5),i=.01)
unlist(noquote(yaml::yaml.load_file("03-Primer_Caso.yml")$default))
unlist(noquote(yaml::yaml.load_file("03-Primer_Caso.yml")$default[1]))
library(FinancialMath)
NPV(cf0=100,cf=c(50,40),times=c(3,5),i=.01)
cf.analysis(cf=c(1,1,101),times=c(1,2,3),i=.04,time.d=TRUE)
collar(S=100,K1=90,K2=110,r=.05,t=1,price1=5,price2=15,plot=TRUE)
library(FinancialMath)
collar(S=100,K1=90,K2=110,r=.05,t=1,price1=5,price2=15,plot=TRUE)
butterfly.spread.bls(S=100,K1=75,K2=100,K3=125,r=.03,t=1,sd=.2)
butterfly.spread.bls(S=100,K1=75,K2=100,K3=125,r=.03,t=1,sd=.2)
IRR(cf0=100,cf=c(1,1,30,40,50,1),times=c(1,1,3,4,5,6))
IRR(cf0=100,cf=c(1,1,30,40,50,1),times=c(1,1,3,4,5,6))
install.packages(c("bibliometrix", "bookdown", "lme4", "RcppArmadillo", "reticulate", "shinyWidgets"))
cf.analysis(cf=c(1,1,101),times=c(1,2,3),i=.04,time.d=TRUE, plot = TRUE)
library(FinancialMath)
cf.analysis(cf=c(1,1,101),times=c(1,2,3),i=.04,time.d=TRUE, plot = TRUE)
library(reticulate)
NPV(cf0 = 3000, cf=c(3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000), times = c(12, 12, 12, 12, 12, 12, 12, 12, 12, 12), i = 0.1)
library(FinancialMath)
NPV(cf0 = 3000, cf=c(3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000), times = c(12, 12, 12, 12, 12, 12, 12, 12, 12, 12), i = 0.1)
2 + 2
2 + 2
library(FinancialMath)
library(reticulate)
library(FinancialMath)
library(reticulate)
library(FinancialMath)
library(reticulate)
reticulate
library(FinancialMath)
library(reticulate)
Aguacate <- 15
# primer acertijo de redes sociales
1+1-1*(1+1-1)/1+1*(-1)
# asigna los numeros a cada fruta
Mango <- 10
# asigna los numeros a cada fruta
Mango <- 10
Manzana <- 5
Aguacate <- 15
# resuelve el complejo acertijo
resultado <-2*Aguacate + 4*Manzana + 1.5*Mango
# resuelve el complejo acertijo
resultado <-2*Aguacate + 4*Manzana + 1.5*Mango
# imprime el resultado por pantalla
resultado
# observa la clase del resultado
class(resultado)
# crea una variable con algún nombre
nombre <- "rafa"
# observa la clase del nombre
class(nombre)
# es 1 mayor que 2
1
# es 1 mayor que 2
1 > 2
# cual es la clase de esto
class(1 > 2)
# suma nombre con resultado
nombre + resultado
# crear vector carácter con nombre de las películas
nombre <- c("Pato", "Pato 2", "Pato 3", "Pato 4")
# crear vector numérico con puntuación de las películas
Puntuación <- c(7.9, 7.2, 6.1, 6.3)
# crear vector lógico sobre si la película es posterior a 2015
Posterior_2005 <- c(FALSE,FALSE, TRUE, TRUE)
nombre
Puntuación
Posterior_2005
# sumar 2 a la puntuación
puntuación + 1
# dividir la puntuación entre 2
Puntuación / 2
# crea la puntuación de rafa
PuntuaciónMsB <- c(10,9, 6,7)
# calcular diferencia entre puntuaciones
puntuación - PuntuaciónMsB
# calcular diferencia entre puntuaciones
Puntuación - PuntuaciónMsB
# calcular la longitud del vector
length(Puntuación)
# calcular el promedio del vector puntuacion
mean(Puntuación)
## selección basada en posición
# seleccionar la tercera película
nombre[3]
# seleccionar la primera y la última película
nombre[c(1,4)]
## selección basada en condición lógica
# crear condición lógica
puntuación baja<- Puntuación < 7
## selección basada en condición lógica
# crear condición lógica
puntuación_baja<- Puntuación < 7
## selección basada en condición lógica
# crear condición lógica
puntuación_baja<- Puntuación < 7
## selección basada en condición lógica
# crear condición lógica
Puntuación_baja <- Puntuación < 7
# mostrar condición para ver TRUE/FALSE
Puntuación_baja
# mostrar puntuaciones bajas
Puntuación[Puntuación_baja]
# mostrar nombres de películas con puntuaciones bajas
nombre[puntuación_baja]
# crear vectores para las columnas de la matriz
warner <- c(20,20,16,17,17,22,17,18,19)
disney <- c(11,13,11,8,12,11,12,8,10)
fox <- c(18,15,15,15,16,17,15,13,11)
# creando matriz a partir de vectores
peliculas <- matrix(c(warner, disney, fox),
nrow = 9,
ncol = 3)
# imprimir matriz en consola
peliculas
# agregar nombres de columnas
colnames(peliculas) <- c(warner, disney, fox)
# agregar nombres de filas/renglones
rownames(peliculas) <- c ('2010', '2011', '2012', '2013','2014','2015','2016','2017')
# agregar nombres de columnas
colnames(peliculas) <- c(warner, disney, fox)
# agregar nombres de columnas
colnames(peliculas) <- c(warner,disney,fox)
# agregar nombres de columnas
colnames(peliculas)<-c(warner,disney,fox)
# agregar nombres de columnas
colnames(peliculas)<-c('warner','disney','fox')
# agregar nombres de filas/renglones
rownames(peliculas) <- c ('2010', '2011', '2012', '2013','2014','2015','2016','2017')
# agregar nombres de filas/renglones
rownames(peliculas) <- c ('2010', '2011', '2012', '2013','2014','2015','2016','2017','2018')
# imprimir matriz por segunda vez
peliculas
# resta 5 a la matriz
peliculas - 5
# sumar matriz consigo misma
peliculas+peliculas
# multiplicar la matriz consigo mismo
peliculas*peliculas
# seleccionar un elemento de la matriz
peliculas[3,2]
# seleccionar más de un elemento de la matriz
peliculas['2012', 'disney']
# seleccionar una fila o renglón
peliculas[c(3,4), c(2,3)]
# seleccionar un elemento de la matriz
peliculas[3,2]
peliculas['2012', 'disney']
# seleccionar más de un elemento de la matriz
peliculas[c(3,4), c(2,3)]
peliculas[c(3,4), c('disney')]
# seleccionar una fila o renglón
peliculas[3,]
peliculas['2012']
# seleccionar una fila o renglón
peliculas[3,]
peliculas['2012']
# seleccionar una columna
peliculas[,2]
# crear vector de ventas
tallas <- c('m', 'g', 'S', 'S','m', 'M')
# intentar graficar
plot(tallas)
# graficar factor
plot(tallas_factor)
# crear factor de un vector
tallas_factor <- factor(tallas)
# graficar factor
plot(tallas_factor)
# mirar niveles de factor
levels(tallas_factor)
# creando factor recodificado
tallas_recodificado <- factor(tallas,
levels = c("g","m","M","S"),
labels = c("G","M","M","S"))
# graficando ventas_recodificado
plot(tallas_recodificado)
# ordenando niveles (copiar factor anterior)
tallas_recodificado <- factor(tallas,
ordered = TRUE
levels = c("g","m","M","S"),
# ordenando niveles (copiar factor anterior)
tallas_ordenado <- factor(tallas,
ordered = TRUE
levels = c("g","m","M","S"),
# ordenando niveles (copiar factor anterior)
tallas_ordenado <- factor(tallas,
ordered = TRUE,
levels = c("g","m","M","S"),
labels = c("G","M","M","S"))
# viendo el orden en los niveles
tallas_ordenado
# graficando el factor ordenado
plot(tallas_ordenado)
# ordenando niveles (copiar factor anterior)
tallas_ordenado <- factor(tallas,
ordered = TRUE,
levels = c("g","m","M","S"),
labels = c("G","M","M","S"))
# graficando el factor ordenado
plot(tallas_ordenado)
# viendo el orden en los niveles
tallas_ordenado
# ordenando niveles (copiar factor anterior)
tallas_ordenado <- factor(tallas,
ordered = TRUE,
levels = c("S","m","M","g"),
labels = c("S","M","M","G"))
# viendo el orden en los niveles
tallas_ordenado
# graficando el factor ordenado
plot(tallas_ordenado)
library(FinancialMath)
library(reticulate)
detach("package:reticulate", unload = TRUE)
library(reticulate)
detach("package:reticulate", unload = TRUE)
library(reticulate)
library(reticulate)
library(reticulate)
library(reticulate)
virtualenv_create("r-reticulate-new")
use_virtualenv("r-reticulate-new", required = TRUE)
library(reticulate)
virtualenv_create("r-reticulate-new")
use_virtualenv("r-reticulate-new", required = TRUE)
conda env remove --name r-reticulate-new
library(reticulate)
virtualenv_create("r-reticulate-new")
use_virtualenv("r-reticulate-new", required = TRUE)
library(reticulate)
use_virtualenv("r-reticulate-new", required = TRUE)
py_config()
py_install("pandas")
py_run_string("import pandas as pd")
remotes::install_github("rstudio/reticulate")
reticulate::install_miniconda()
install.packages("reticulate")
install.packages("reticulate")
library(reticulate)
use_python("C:/ruta/a/tu/python.exe", required = TRUE)
#use_python("C:/Users/USER/anaconda3/python311.dll", required = TRUE)
```
install.packages("FinancialMath")
install.packages("reticulate")
install.packages("png")
install.packages("png")
install.packages("png")
library(readxl)
PAA_2024 <- read_excel("Data/PAA-2024.xlsx")
View(PAA_2024)
library(ggplot2)
data <- readxl::read_excel("Data/PAA-2024.xlsx")
data <- data[c(2,10)]
library(ggplot2)
ggplot(data, aes(y = `Valor estimado en la vigencia actual`)) +
geom_histogram(binwidth = 1000, fill = "blue", color = "black", alpha = 0.7) +
theme_minimal() +
labs(title = "Histogram of PAA_2024 Column 10",
x = "Value",
y = "Frequency")
ggplot(data, aes(y = `Valor estimado en la vigencia actual`)) +
geom_histogram(binwidth = 1000000, fill = "blue", color = "black", alpha = 0.7) +
theme_minimal() +
labs(title = "Histogram of PAA_2024 Column 10",
x = "Value",
y = "Frequency")
ggplot(data,aes(x=data$Descripción,
y = data$`Valor estimado en la vigencia actual`)) +
geom_bar(binwidth=1)
ggplot(data,aes(x=Descripción,
y = `Valor estimado en la vigencia actual`)) +
geom_bar(binwidth=1)
library(ggplot2)
ggplot(data,aes(x=Descripción,
y = `Valor estimado en la vigencia actual`)) +
geom_bar(binwidth=1000000)
rlang::last_trace()
ggplot(data,aes(x=reorder(Descripción, `Valor estimado en la vigencia actual`),
y = `Valor estimado en la vigencia actual`)) +
geom_bar(binwidth=1000000)
ggplot(data,aes(x=reorder(Descripción, `Valor estimado en la vigencia actual`),
y = `Valor estimado en la vigencia actual`)) +
geom_bar()
library(dplyr)
library(forcats)
data %>% mutate(name = fct_reorder(Descripción, `Valor estimado en la vigencia actual`)) %>%
ggplot( aes(x=Descripción, y=`Valor estimado en la vigencia actual`)) +
geom_bar(stat="identity", fill="#f68060", alpha=.6, width=.4) +
coord_flip() +
xlab("") +
theme_bw()
rlang::last_trace()
data <- na.omit(data[c(2,10)])
data <- readxl::read_excel("Data/PAA-2024.xlsx")
data <- readxl::read_excel("Data/PAA-2024.xlsx")
data <- na.omit(data[c(2,10)])
library(dplyr)
library(forcats)
data %>% mutate(name = fct_reorder(Descripción, `Valor estimado en la vigencia actual`)) %>%
ggplot( aes(x=Descripción, y=`Valor estimado en la vigencia actual`)) +
geom_bar(stat="identity", fill="#f68060", alpha=.6, width=.4) +
coord_flip() +
xlab("") +
theme_bw()
View(PAA_2024)
data <- readxl::read_excel("Data/PAA-2024.xlsx")
data <- na.omit(data[c(2,4)])
library(dplyr)
library(forcats)
data %>% mutate(name = fct_reorder(Descripción, `Fecha estimada de presentación de ofertas (mes)`)) %>%
ggplot( aes(x=Descripción, y=`Fecha estimada de presentación de ofertas (mes)`)) +
geom_bar(stat="identity", fill="#f68060", alpha=.6, width=.4) +
coord_flip() +
xlab("") +
theme_bw()
data <- readxl::read_excel("Data/PAA-2024.xlsx")
data <- na.omit(data[c(4,10)])
library(dplyr)
library(forcats)
data %>% mutate(name = fct_reorder(`Valor estimado en la vigencia actual`, `Fecha estimada de presentación de ofertas (mes)`)) %>%
ggplot( aes(x=`Valor estimado en la vigencia actual`, y=`Fecha estimada de presentación de ofertas (mes)`)) +
geom_bar(stat="identity", fill="#f68060", alpha=.6, width=.4) +
coord_flip() +
xlab("") +
theme_bw()
data <- readxl::read_excel("Data/PAA-2024.xlsx")
data <- na.omit(data[c(4,10)])
library(dplyr)
library(forcats)
data %>% mutate(name = fct_reorder(`Valor estimado en la vigencia actual`, `Fecha estimada de presentación de ofertas (mes)`)) %>%
ggplot( aes(x=`Valor estimado en la vigencia actual`, y=`Fecha estimada de presentación de ofertas (mes)`)) +
geom_bar(stat="identity", fill="#f68060", alpha=.6, width=.4) +
coord_flip() +
xlab("") +
theme_bw()
View(data)
library(readxl)
PAA_2024 <- read_excel("Data/PAA-2024.xlsx")
View(PAA_2024)
data <- readxl::read_excel("Data/PAA-2024.xlsx")
data <- na.omit(data[c(4,10)])
colnames(data)[1] <- "Mes"
colnames(data)[2] <- "Valor"
library(dplyr)
resumen <- data %>%
group_by(Mes) %>%
summarize(Presupuesto = sum(Valor, na.rm = TRUE))
rowSums(resumen$Presupuesto)
View(resumen)
sum(resumen$Presupuesto)
library(reticulate)
data <- readxl::read_excel("Data/PAA-2024.xlsx")
data <- na.omit(data[c(4,10)])
colnames(data)[1] <- "Mes"
colnames(data)[2] <- "Valor"
library(dplyr)
resumen <- data %>%
group_by(Mes) %>%
summarize(Presupuesto = sum(Valor, na.rm = TRUE))
View(resumen)
View(data)
library(readxl)
PAA_2024 <- read_excel("Data/PAA-2024.xlsx")
View(PAA_2024)
library(dplyr)
correos <- filter(PAA_2024, grepl('Bogotá|Barrancabermeja', Ubicaión))
library(dplyr)
correos <- filter(PAA_2024, grepl('Bogotá|Barrancabermeja', Ubicación))
View(correos)
unique(correos$`Nombre del responsable`)
correosBogota <- filter(PAA_2024, grepl('Bogotá', Ubicación))
correosBarrancabermeja <- filter(PAA_2024, grepl('Barrancabermeja', Ubicación))
unique(correosBogota$`Nombre del responsable`)
unique(correosBarrancabermeja$`Nombre del responsable`)
